pde_input_filename is deleted? true
1: ./static.sh
2: ./javex
3: grok
4: ql

 1: AbstractFactory
 2: ajp_code/AbstractFactory
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/AbstractFactory ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/AbstractFactory ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/AbstractFactory
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.AbstractFactory
BufferedWriter pdeIn

 1: adapter
 2: ajp_code/adapter
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/adapter ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/adapter ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/adapter ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/adapter ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/adapter ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/adapter ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/adapter ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/adapter ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/adapter ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/adapter ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/adapter ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/adapter ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/adapter ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/adapter ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/adapter ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/adapter ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/adapter ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/adapter ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/adapter ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/adapter ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/adapter ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/adapter ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/adapter ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/adapter
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.adapter
BufferedWriter pdeIn

 1: bridge
 2: ajp_code/bridge
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/bridge ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/bridge ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/bridge ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/bridge ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/bridge ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/bridge ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/bridge ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/bridge ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/bridge ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/bridge ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/bridge ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/bridge ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/bridge ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/bridge ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/bridge ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/bridge ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/bridge ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/bridge ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/bridge ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/bridge ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/bridge ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/bridge ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/bridge ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/bridge
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.bridge
BufferedWriter pdeIn

 1: builder
 2: ajp_code/builder
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/builder ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/builder ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/builder ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/builder ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/builder ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/builder ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/builder ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/builder ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/builder ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/builder ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/builder ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/builder ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/builder ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/builder ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/builder ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/builder ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/builder ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/builder ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/builder ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/builder ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/builder ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/builder ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/builder ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/builder
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.builder
BufferedWriter pdeIn

 1: chain
 2: ajp_code/chain
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/chain ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/chain ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/chain ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/chain ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/chain ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/chain ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/chain ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/chain ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/chain ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/chain ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/chain ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/chain ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/chain ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/chain ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/chain ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/chain ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/chain ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/chain ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/chain ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/chain ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/chain ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/chain ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/chain ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/chain
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.chain
BufferedWriter pdeIn

 1: command
 2: ajp_code/command
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/command ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/command ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/command ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/command ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/command ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/command ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/command ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/command ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/command ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/command ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/command ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/command ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/command ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/command ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/command ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/command ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/command ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/command ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/command ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/command ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/command ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/command ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/command ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/command
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.command
BufferedWriter pdeIn

 1: composite
 2: ajp_code/composite
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/composite ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/composite ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/composite ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/composite ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/composite ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/composite ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/composite ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/composite ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/composite ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/composite ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/composite ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/composite ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/composite ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/composite ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/composite ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/composite ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/composite ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/composite ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/composite ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/composite ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/composite ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/composite ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/composite ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/composite
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.composite
BufferedWriter pdeIn

 1: decorator
 2: ajp_code/decorator
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/decorator ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/decorator ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/decorator ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/decorator ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/decorator ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/decorator ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/decorator ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/decorator ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/decorator ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/decorator ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/decorator ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/decorator ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/decorator ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/decorator ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/decorator ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/decorator ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/decorator ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/decorator ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/decorator ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/decorator ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/decorator ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/decorator ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/decorator ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/decorator
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.decorator
BufferedWriter pdeIn

 1: FactoryMethod
 2: ajp_code/FactoryMethod
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/FactoryMethod ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/FactoryMethod ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/FactoryMethod
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.FactoryMethod
BufferedWriter pdeIn

 1: flyweight
 2: ajp_code/flyweight
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/flyweight ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/flyweight ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/flyweight ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/flyweight ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/flyweight ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/flyweight ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/flyweight ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/flyweight ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/flyweight ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/flyweight ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/flyweight ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/flyweight ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/flyweight ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/flyweight ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/flyweight ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/flyweight ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/flyweight ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/flyweight ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/flyweight ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/flyweight ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/flyweight ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/flyweight ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/flyweight ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/flyweight
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.flyweight
BufferedWriter pdeIn

 1: interpreter
 2: ajp_code/interpreter
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/interpreter ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/interpreter ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/interpreter ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/interpreter ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/interpreter ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/interpreter ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/interpreter ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/interpreter ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/interpreter ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/interpreter ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/interpreter ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/interpreter ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/interpreter ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/interpreter ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/interpreter ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/interpreter ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/interpreter ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/interpreter ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/interpreter ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/interpreter ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/interpreter ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/interpreter ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/interpreter ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/interpreter
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.interpreter
BufferedWriter pdeIn

 1: iterator
 2: ajp_code/iterator
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/iterator ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/iterator ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/iterator ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/iterator ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/iterator ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/iterator ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/iterator ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/iterator ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/iterator ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/iterator ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/iterator ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/iterator ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/iterator ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/iterator ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/iterator ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/iterator ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/iterator ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/iterator ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/iterator ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/iterator ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/iterator ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/iterator ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/iterator ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/iterator
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.iterator
BufferedWriter pdeIn

 1: mediator
 2: ajp_code/mediator
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/mediator ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/mediator ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/mediator ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/mediator ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/mediator ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/mediator ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/mediator ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/mediator ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/mediator ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/mediator ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/mediator ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/mediator ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/mediator ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/mediator ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/mediator ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/mediator ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/mediator ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/mediator ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/mediator ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/mediator ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/mediator ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/mediator ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/mediator ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/mediator
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.mediator
BufferedWriter pdeIn

 1: memento
 2: ajp_code/memento
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/memento ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/memento ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/memento ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/memento ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/memento ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/memento ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/memento ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/memento ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/memento ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/memento ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/memento ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/memento ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/memento ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/memento ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/memento ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/memento ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/memento ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/memento ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/memento ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/memento ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/memento ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/memento ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/memento ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/memento
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.memento
BufferedWriter pdeIn

 1: observer
 2: ajp_code/observer
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/observer ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/observer ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/observer ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/observer ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/observer ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/observer ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/observer ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/observer ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/observer ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/observer ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/observer ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/observer ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/observer ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/observer ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/observer ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/observer ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/observer ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/observer ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/observer ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/observer ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/observer ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/observer ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/observer ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/observer
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.observer
BufferedWriter pdeIn

 1: prototype
 2: ajp_code/prototype
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/prototype ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/prototype ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/prototype ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/prototype ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/prototype ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/prototype ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/prototype ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/prototype ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/prototype ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/prototype ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/prototype ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/prototype ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/prototype ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/prototype ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/prototype ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/prototype ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/prototype ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/prototype ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/prototype ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/prototype ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/prototype ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/prototype ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/prototype ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/prototype
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.prototype
BufferedWriter pdeIn

 1: proxy
 2: ajp_code/proxy
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/proxy ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/proxy ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/proxy ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/proxy ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/proxy ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/proxy ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/proxy ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/proxy ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/proxy ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/proxy ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/proxy ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/proxy ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/proxy ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/proxy ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/proxy ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/proxy ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/proxy ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/proxy ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/proxy ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/proxy ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/proxy ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/proxy ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/proxy ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/proxy
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.proxy
BufferedWriter pdeIn

 1: singleton
 2: ajp_code/singleton
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/singleton ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/singleton ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/singleton ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/singleton ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/singleton ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/singleton ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/singleton ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/singleton ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/singleton ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/singleton ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/singleton ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/singleton ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/singleton ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/singleton ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/singleton ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/singleton ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/singleton ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/singleton ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/singleton ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/singleton ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/singleton ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/singleton ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/singleton ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/singleton
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.singleton
BufferedWriter pdeIn

 1: state
 2: ajp_code/state
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/state ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/state ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/state ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/state ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/state ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/state ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/state ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/state ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/state ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/state ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/state ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/state ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/state ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/state ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/state ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/state ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/state ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/state ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/state ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/state ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/state ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/state ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/state ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/state
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.state
BufferedWriter pdeIn

 1: strategy
 2: ajp_code/strategy
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/strategy ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/strategy ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/strategy ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/strategy ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/strategy ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/strategy ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/strategy ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/strategy ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/strategy ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/strategy ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/strategy ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/strategy ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/strategy ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/strategy ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/strategy ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/strategy ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/strategy ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/strategy ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/strategy ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/strategy ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/strategy ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/strategy ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/strategy ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/strategy
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.strategy
BufferedWriter pdeIn

 1: templatemethod
 2: ajp_code/templatemethod
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/templatemethod ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/templatemethod ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/templatemethod ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/templatemethod ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/templatemethod ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/templatemethod ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/templatemethod ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/templatemethod ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/templatemethod ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/templatemethod ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/templatemethod ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/templatemethod ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/templatemethod ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/templatemethod ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/templatemethod ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/templatemethod ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/templatemethod ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/templatemethod ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/templatemethod ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/templatemethod ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/templatemethod ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/templatemethod ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/templatemethod ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/templatemethod
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.templatemethod
BufferedWriter pdeIn

 1: visitor
 2: ajp_code/visitor
 3: RunPattern.java

 1: AbstractFactory
 2: ql/AbstractFactory.ql
 3: // abstractFactory concreteFactory product abstractProduct 
./static.sh ./javex grok ql ajp_code/visitor ql/AbstractFactory.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/AbstractFactory.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/AbstractFactory.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: adapter
 2: ql/adapter.ql
 3: // client target adapter adaptee
./static.sh ./javex grok ql ajp_code/visitor ql/adapter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/adapter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/adapter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: bridge
 2: ql/bridge.ql
 3: // refinedAbstraction abstraction implementer concreteImplementer 
./static.sh ./javex grok ql ajp_code/visitor ql/bridge.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/bridge.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/bridge.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: builder
 2: ql/builder.ql
 3: // director builder concreteBuilder product
./static.sh ./javex grok ql ajp_code/visitor ql/builder.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/builder.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/builder.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: chain
 2: ql/chain.ql
 3: // client handler concreteHandler 
./static.sh ./javex grok ql ajp_code/visitor ql/chain.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/chain.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/chain.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: command
 2: ql/command.ql
 3: // invoker command concreteCommand receiver 
./static.sh ./javex grok ql ajp_code/visitor ql/command.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/command.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/command.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: composite
 2: ql/composite.ql
 3: // leaf component composite 
./static.sh ./javex grok ql ajp_code/visitor ql/composite.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/composite.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/composite.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: decorator
 2: ql/decorator.ql
 3: // concreteComponent component decorator concreteDecorator 
./static.sh ./javex grok ql ajp_code/visitor ql/decorator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/decorator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/decorator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: FactoryMethod
 2: ql/FactoryMethod.ql
 3: // creator concreteCreator concreteProduct product
./static.sh ./javex grok ql ajp_code/visitor ql/FactoryMethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/FactoryMethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/FactoryMethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: flyweight
 2: ql/flyweight.ql
 3: // flyweightFactory flyweight concreteFlyweight
./static.sh ./javex grok ql ajp_code/visitor ql/flyweight.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/flyweight.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/flyweight.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: interpreter
 2: ql/interpreter.ql
 3: // expression abstractExpression context
./static.sh ./javex grok ql ajp_code/visitor ql/interpreter.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/interpreter.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/interpreter.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: iterator
 2: ql/iterator.ql
 3: // aggregate concreteAggregate concreteIterator 
./static.sh ./javex grok ql ajp_code/visitor ql/iterator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/iterator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/iterator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: mediator
 2: ql/mediator.ql
 3: // concreteMediator mediator concreteColleague 
./static.sh ./javex grok ql ajp_code/visitor ql/mediator.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/mediator.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/mediator.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: memento
 2: ql/memento.ql
 3: // originator memento caretaker 
./static.sh ./javex grok ql ajp_code/visitor ql/memento.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/memento.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/memento.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: observer
 2: ql/observer.ql
 3: // subject concreteSubject observer concreteObserver
./static.sh ./javex grok ql ajp_code/visitor ql/observer.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/observer.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/observer.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: prototype
 2: ql/prototype.ql
 3: // prototypeInterface prototype client
./static.sh ./javex grok ql ajp_code/visitor ql/prototype.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/prototype.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/prototype.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: proxy
 2: ql/proxy.ql
 3: // realSubject subject proxy 
./static.sh ./javex grok ql ajp_code/visitor ql/proxy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/proxy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/proxy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: singleton
 2: ql/singleton.ql
 3: // client singleton
./static.sh ./javex grok ql ajp_code/visitor ql/singleton.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/singleton.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/singleton.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
ERROR>private unresolvable
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
EXCEPTION: Java IO

 1: state
 2: ql/state.ql
 3: // context state concreteState 
./static.sh ./javex grok ql ajp_code/visitor ql/state.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/state.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/state.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: strategy
 2: ql/strategy.ql
 3: // context strategy concreteStrategy
./static.sh ./javex grok ql ajp_code/visitor ql/strategy.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/strategy.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/strategy.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: templatemethod
 2: ql/templatemethod.ql
 3: // abstractClass concreteClass
./static.sh ./javex grok ql ajp_code/visitor ql/templatemethod.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/templatemethod.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/templatemethod.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn

 1: visitor
 2: ql/visitor.ql
 3: // visitor concreteVisitor element concreteElement 
./static.sh ./javex grok ql ajp_code/visitor ql/visitor.ql candidateinstances/
Run Static analysis: ./static.sh ./javex grok ql ajp_code/visitor ql/visitor.ql candidateinstances/
OUTPUT>
OUTPUT>Arguments passed:
OUTPUT>-javex      ./javex
OUTPUT>-grok       grok
OUTPUT>-ql         ql
OUTPUT>-directory  ajp_code/visitor
OUTPUT>-ql script  ql/visitor.ql
OUTPUT>
OUTPUT>Javex
OUTPUT>Javex done
OUTPUT>Grok
OUTPUT>Grok: Remove special characters that cause QL to fail: i.e. [  ] 
OUTPUT>Grok done
OUTPUT>Ql
OUTPUT>Ql done
ExitValue: 0
BufferedWriter out
BufferedWriter in
directoryReplaced ajp_code.visitor
BufferedWriter pdeIn
Input parameter for -static true
Input parameter for -input pde.input
Input parameter for -print_statistics || -ps  true
Input parameter for -create_report true. Writting report to file: report.txt
Input parameter for -threshold 0.8
# Code example from:           candidateinstances/AbstractFactory.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 4 out of 4 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=abstractFactory, 1=concreteFactory, 2=product, 3=abstractProduct}

  0	 100%	 {0=ajp_code.AbstractFactory.AddressFactory, 1=ajp_code.AbstractFactory.FrenchAddressFactory, 2=ajp_code.AbstractFactory.FrenchPhoneNumber, 3=ajp_code.AbstractFactory.PhoneNumber}
  1	 100%	 {0=ajp_code.AbstractFactory.AddressFactory, 1=ajp_code.AbstractFactory.FrenchAddressFactory, 2=ajp_code.AbstractFactory.FrenchAddress, 3=ajp_code.AbstractFactory.Address}
  2	 100%	 {0=ajp_code.AbstractFactory.AddressFactory, 1=ajp_code.AbstractFactory.USAddressFactory, 2=ajp_code.AbstractFactory.USPhoneNumber, 3=ajp_code.AbstractFactory.PhoneNumber}
  3	 100%	 {0=ajp_code.AbstractFactory.AddressFactory, 1=ajp_code.AbstractFactory.USAddressFactory, 2=ajp_code.AbstractFactory.USAddress, 3=ajp_code.AbstractFactory.Address}

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.adapter.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.bridge.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.builder.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 16 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.chain.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.command.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 16 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.composite.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.decorator.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.flyweight.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.interpreter.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.iterator.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 14 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.mediator.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.memento.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 37 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.observer.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 16 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.prototype.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.proxy.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.state.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 14 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.strategy.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 14 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.templatemethod.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/AbstractFactory.visitor.out
# Pattern we want to detect:   candidateinstances/AbstractFactory.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/adapter.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.adapter.out
# Pattern we want to detect:   candidateinstances/adapter.adapter.out

Number of positive candidate instances after the dynamic analysis: 2 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=client, 1=target, 2=adapter, 3=adaptee}

  0	 100%	 {0=ajp_code.adapter.RunPattern, 1=ajp_code.adapter.Contact, 2=ajp_code.adapter.ContactAdapter, 3=ajp_code.adapter.Chovnatlh}
  1	 100%	 {0=ajp_code.adapter.RunPattern, 1=ajp_code.adapter.Contact, 2=ajp_code.adapter.ContactAdapter, 3=ajp_code.adapter.ChovnatlhImpl}

######################################################################################################## 

# Code example from:           candidateinstances/adapter.bridge.out
# Pattern we want to detect:   candidateinstances/adapter.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.builder.out
# Pattern we want to detect:   candidateinstances/adapter.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.chain.out
# Pattern we want to detect:   candidateinstances/adapter.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.command.out
# Pattern we want to detect:   candidateinstances/adapter.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.composite.out
# Pattern we want to detect:   candidateinstances/adapter.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.decorator.out
# Pattern we want to detect:   candidateinstances/adapter.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/adapter.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.flyweight.out
# Pattern we want to detect:   candidateinstances/adapter.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.interpreter.out
# Pattern we want to detect:   candidateinstances/adapter.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.iterator.out
# Pattern we want to detect:   candidateinstances/adapter.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.mediator.out
# Pattern we want to detect:   candidateinstances/adapter.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.memento.out
# Pattern we want to detect:   candidateinstances/adapter.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.observer.out
# Pattern we want to detect:   candidateinstances/adapter.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.prototype.out
# Pattern we want to detect:   candidateinstances/adapter.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.proxy.out
# Pattern we want to detect:   candidateinstances/adapter.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.state.out
# Pattern we want to detect:   candidateinstances/adapter.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.strategy.out
# Pattern we want to detect:   candidateinstances/adapter.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.templatemethod.out
# Pattern we want to detect:   candidateinstances/adapter.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/adapter.visitor.out
# Pattern we want to detect:   candidateinstances/adapter.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/bridge.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.adapter.out
# Pattern we want to detect:   candidateinstances/bridge.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.bridge.out
# Pattern we want to detect:   candidateinstances/bridge.bridge.out

Number of positive candidate instances after the dynamic analysis: 2 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=refinedAbstraction, 1=abstraction, 2=implementer, 3=concreteImplementer}

  0	 100%	 {0=ajp_code.bridge.NumberedList, 1=ajp_code.bridge.BaseList, 2=ajp_code.bridge.ListImpl, 3=ajp_code.bridge.OrderedListImpl}
  1	 100%	 {0=ajp_code.bridge.OrnamentedList, 1=ajp_code.bridge.BaseList, 2=ajp_code.bridge.ListImpl, 3=ajp_code.bridge.OrderedListImpl}

######################################################################################################## 

# Code example from:           candidateinstances/bridge.builder.out
# Pattern we want to detect:   candidateinstances/bridge.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.chain.out
# Pattern we want to detect:   candidateinstances/bridge.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.command.out
# Pattern we want to detect:   candidateinstances/bridge.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.composite.out
# Pattern we want to detect:   candidateinstances/bridge.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.decorator.out
# Pattern we want to detect:   candidateinstances/bridge.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/bridge.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.flyweight.out
# Pattern we want to detect:   candidateinstances/bridge.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.interpreter.out
# Pattern we want to detect:   candidateinstances/bridge.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.iterator.out
# Pattern we want to detect:   candidateinstances/bridge.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.mediator.out
# Pattern we want to detect:   candidateinstances/bridge.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.memento.out
# Pattern we want to detect:   candidateinstances/bridge.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 28 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.observer.out
# Pattern we want to detect:   candidateinstances/bridge.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.prototype.out
# Pattern we want to detect:   candidateinstances/bridge.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.proxy.out
# Pattern we want to detect:   candidateinstances/bridge.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.state.out
# Pattern we want to detect:   candidateinstances/bridge.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.strategy.out
# Pattern we want to detect:   candidateinstances/bridge.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.templatemethod.out
# Pattern we want to detect:   candidateinstances/bridge.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/bridge.visitor.out
# Pattern we want to detect:   candidateinstances/bridge.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/builder.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.adapter.out
# Pattern we want to detect:   candidateinstances/builder.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.bridge.out
# Pattern we want to detect:   candidateinstances/builder.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.builder.out
# Pattern we want to detect:   candidateinstances/builder.builder.out

Number of positive candidate instances after the dynamic analysis: 3 out of 9 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=director, 1=builder, 2=concreteBuilder, 3=product}

  0	 100%	 {0=ajp_code.builder.Scheduler, 1=ajp_code.builder.AppointmentBuilder, 2=ajp_code.builder.MeetingBuilder, 3=ajp_code.builder.InformationRequiredException}
  1	 100%	 {0=ajp_code.builder.Scheduler, 1=ajp_code.builder.AppointmentBuilder, 2=ajp_code.builder.MeetingBuilder, 3=ajp_code.builder.Appointment}
  2	 100%	 {0=ajp_code.builder.Scheduler, 1=ajp_code.builder.AppointmentBuilder, 2=ajp_code.builder.MeetingBuilder, 3=ajp_code.builder.AppointmentBuilder}

######################################################################################################## 

# Code example from:           candidateinstances/builder.chain.out
# Pattern we want to detect:   candidateinstances/builder.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.command.out
# Pattern we want to detect:   candidateinstances/builder.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.composite.out
# Pattern we want to detect:   candidateinstances/builder.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.decorator.out
# Pattern we want to detect:   candidateinstances/builder.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/builder.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.flyweight.out
# Pattern we want to detect:   candidateinstances/builder.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.interpreter.out
# Pattern we want to detect:   candidateinstances/builder.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.iterator.out
# Pattern we want to detect:   candidateinstances/builder.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.mediator.out
# Pattern we want to detect:   candidateinstances/builder.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.memento.out
# Pattern we want to detect:   candidateinstances/builder.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 75 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.observer.out
# Pattern we want to detect:   candidateinstances/builder.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.prototype.out
# Pattern we want to detect:   candidateinstances/builder.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.proxy.out
# Pattern we want to detect:   candidateinstances/builder.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.state.out
# Pattern we want to detect:   candidateinstances/builder.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.strategy.out
# Pattern we want to detect:   candidateinstances/builder.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.templatemethod.out
# Pattern we want to detect:   candidateinstances/builder.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/builder.visitor.out
# Pattern we want to detect:   candidateinstances/builder.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/chain.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.adapter.out
# Pattern we want to detect:   candidateinstances/chain.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.bridge.out
# Pattern we want to detect:   candidateinstances/chain.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.builder.out
# Pattern we want to detect:   candidateinstances/chain.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.chain.out
# Pattern we want to detect:   candidateinstances/chain.chain.out

Number of positive candidate instances after the dynamic analysis: 2 out of 6 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=client, 1=handler, 2=concreteHandler}

  0	 100%	 {0=ajp_code.chain.Task, 1=ajp_code.chain.ProjectItem, 2=ajp_code.chain.Task}
  1	 100%	 {0=ajp_code.chain.RunPattern, 1=ajp_code.chain.ProjectItem, 2=ajp_code.chain.Task}

######################################################################################################## 

# Code example from:           candidateinstances/chain.command.out
# Pattern we want to detect:   candidateinstances/chain.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.composite.out
# Pattern we want to detect:   candidateinstances/chain.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.decorator.out
# Pattern we want to detect:   candidateinstances/chain.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/chain.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.flyweight.out
# Pattern we want to detect:   candidateinstances/chain.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.interpreter.out
# Pattern we want to detect:   candidateinstances/chain.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.iterator.out
# Pattern we want to detect:   candidateinstances/chain.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.mediator.out
# Pattern we want to detect:   candidateinstances/chain.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.memento.out
# Pattern we want to detect:   candidateinstances/chain.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 40 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.observer.out
# Pattern we want to detect:   candidateinstances/chain.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.prototype.out
# Pattern we want to detect:   candidateinstances/chain.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.proxy.out
# Pattern we want to detect:   candidateinstances/chain.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.state.out
# Pattern we want to detect:   candidateinstances/chain.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.strategy.out
# Pattern we want to detect:   candidateinstances/chain.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.templatemethod.out
# Pattern we want to detect:   candidateinstances/chain.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/chain.visitor.out
# Pattern we want to detect:   candidateinstances/chain.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/command.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.adapter.out
# Pattern we want to detect:   candidateinstances/command.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 11 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.bridge.out
# Pattern we want to detect:   candidateinstances/command.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.builder.out
# Pattern we want to detect:   candidateinstances/command.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.chain.out
# Pattern we want to detect:   candidateinstances/command.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.command.out
# Pattern we want to detect:   candidateinstances/command.command.out

Number of positive candidate instances after the dynamic analysis: 4 out of 7 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=invoker, 1=command, 2=concreteCommand, 3=receiver}

  0	 100%	 {0=ajp_code.command.CommandGui, 1=ajp_code.command.UndoableCommand, 2=ajp_code.command.ChangeLocationCommand, 3=ajp_code.command.Appointment}
  1	 100%	 {0=ajp_code.command.ChangeLocationCommand, 1=ajp_code.command.LocationEditor, 2=ajp_code.command.CommandGui, 3=ajp_code.command.LocationImpl}
  2	 100%	 {0=ajp_code.command.ChangeLocationCommand, 1=ajp_code.command.LocationEditor, 2=ajp_code.command.CommandGui, 3=ajp_code.command.Appointment}
  3	 100%	 {0=ajp_code.command.CommandGui, 1=ajp_code.command.UndoableCommand, 2=ajp_code.command.ChangeLocationCommand, 3=ajp_code.command.Location}

######################################################################################################## 

# Code example from:           candidateinstances/command.composite.out
# Pattern we want to detect:   candidateinstances/command.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.decorator.out
# Pattern we want to detect:   candidateinstances/command.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/command.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.flyweight.out
# Pattern we want to detect:   candidateinstances/command.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.interpreter.out
# Pattern we want to detect:   candidateinstances/command.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.iterator.out
# Pattern we want to detect:   candidateinstances/command.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.mediator.out
# Pattern we want to detect:   candidateinstances/command.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.memento.out
# Pattern we want to detect:   candidateinstances/command.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 66 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.observer.out
# Pattern we want to detect:   candidateinstances/command.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.prototype.out
# Pattern we want to detect:   candidateinstances/command.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.proxy.out
# Pattern we want to detect:   candidateinstances/command.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.singleton.out
# Pattern we want to detect:   candidateinstances/command.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.state.out
# Pattern we want to detect:   candidateinstances/command.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.strategy.out
# Pattern we want to detect:   candidateinstances/command.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.templatemethod.out
# Pattern we want to detect:   candidateinstances/command.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/command.visitor.out
# Pattern we want to detect:   candidateinstances/command.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/composite.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.adapter.out
# Pattern we want to detect:   candidateinstances/composite.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.bridge.out
# Pattern we want to detect:   candidateinstances/composite.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.builder.out
# Pattern we want to detect:   candidateinstances/composite.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.chain.out
# Pattern we want to detect:   candidateinstances/composite.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.command.out
# Pattern we want to detect:   candidateinstances/composite.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.composite.out
# Pattern we want to detect:   candidateinstances/composite.composite.out

Number of positive candidate instances after the dynamic analysis: 4 out of 6 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=leaf, 1=component, 2=composite}

  0	 100%	 {0=ajp_code.composite.Task, 1=ajp_code.composite.ProjectItem, 2=ajp_code.composite.Task}
  1	 100%	 {0=ajp_code.composite.Task, 1=ajp_code.composite.ProjectItem, 2=ajp_code.composite.Project}
  2	 100%	 {0=ajp_code.composite.Deliverable, 1=ajp_code.composite.ProjectItem, 2=ajp_code.composite.Task}
  3	 100%	 {0=ajp_code.composite.Deliverable, 1=ajp_code.composite.ProjectItem, 2=ajp_code.composite.Project}

######################################################################################################## 

# Code example from:           candidateinstances/composite.decorator.out
# Pattern we want to detect:   candidateinstances/composite.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/composite.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.flyweight.out
# Pattern we want to detect:   candidateinstances/composite.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.interpreter.out
# Pattern we want to detect:   candidateinstances/composite.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.iterator.out
# Pattern we want to detect:   candidateinstances/composite.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.mediator.out
# Pattern we want to detect:   candidateinstances/composite.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.memento.out
# Pattern we want to detect:   candidateinstances/composite.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 40 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.observer.out
# Pattern we want to detect:   candidateinstances/composite.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.prototype.out
# Pattern we want to detect:   candidateinstances/composite.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.proxy.out
# Pattern we want to detect:   candidateinstances/composite.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.state.out
# Pattern we want to detect:   candidateinstances/composite.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.strategy.out
# Pattern we want to detect:   candidateinstances/composite.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.templatemethod.out
# Pattern we want to detect:   candidateinstances/composite.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/composite.visitor.out
# Pattern we want to detect:   candidateinstances/composite.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/decorator.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.adapter.out
# Pattern we want to detect:   candidateinstances/decorator.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.bridge.out
# Pattern we want to detect:   candidateinstances/decorator.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.builder.out
# Pattern we want to detect:   candidateinstances/decorator.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 21 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.chain.out
# Pattern we want to detect:   candidateinstances/decorator.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.command.out
# Pattern we want to detect:   candidateinstances/decorator.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 21 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.composite.out
# Pattern we want to detect:   candidateinstances/decorator.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 10 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.decorator.out
# Pattern we want to detect:   candidateinstances/decorator.decorator.out

Number of positive candidate instances after the dynamic analysis: 4 out of 6 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=concreteComponent, 1=component, 2=decorator, 3=concreteDecorator}

  0	 80%	 {0=ajp_code.decorator.ProjectDecorator, 1=ajp_code.decorator.ProjectItem, 2=ajp_code.decorator.ProjectDecorator, 3=ajp_code.decorator.DependentProjectItem}
  1	 80%	 {0=ajp_code.decorator.Task, 1=ajp_code.decorator.ProjectItem, 2=ajp_code.decorator.ProjectDecorator, 3=ajp_code.decorator.SupportedProjectItem}
  2	 80%	 {0=ajp_code.decorator.Task, 1=ajp_code.decorator.ProjectItem, 2=ajp_code.decorator.ProjectDecorator, 3=ajp_code.decorator.DependentProjectItem}
  3	 80%	 {0=ajp_code.decorator.ProjectDecorator, 1=ajp_code.decorator.ProjectItem, 2=ajp_code.decorator.ProjectDecorator, 3=ajp_code.decorator.SupportedProjectItem}

######################################################################################################## 

# Code example from:           candidateinstances/decorator.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/decorator.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.flyweight.out
# Pattern we want to detect:   candidateinstances/decorator.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.interpreter.out
# Pattern we want to detect:   candidateinstances/decorator.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.iterator.out
# Pattern we want to detect:   candidateinstances/decorator.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.mediator.out
# Pattern we want to detect:   candidateinstances/decorator.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.memento.out
# Pattern we want to detect:   candidateinstances/decorator.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 60 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.observer.out
# Pattern we want to detect:   candidateinstances/decorator.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 24 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.prototype.out
# Pattern we want to detect:   candidateinstances/decorator.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.proxy.out
# Pattern we want to detect:   candidateinstances/decorator.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.state.out
# Pattern we want to detect:   candidateinstances/decorator.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.strategy.out
# Pattern we want to detect:   candidateinstances/decorator.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.templatemethod.out
# Pattern we want to detect:   candidateinstances/decorator.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/decorator.visitor.out
# Pattern we want to detect:   candidateinstances/decorator.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.adapter.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.bridge.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.builder.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.chain.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.command.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.composite.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.decorator.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 1 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=creator, 1=concreteCreator, 2=concreteProduct, 3=product}

  0	 100%	 {0=ajp_code.FactoryMethod.Editable, 1=ajp_code.FactoryMethod.Contact, 2=ajp_code.FactoryMethod.Contact$ContactEditor, 3=ajp_code.FactoryMethod.ItemEditor}

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.flyweight.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.interpreter.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.iterator.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.mediator.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.memento.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 11 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.observer.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.prototype.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.proxy.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.singleton.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.state.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.strategy.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.templatemethod.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/FactoryMethod.visitor.out
# Pattern we want to detect:   candidateinstances/FactoryMethod.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/flyweight.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.adapter.out
# Pattern we want to detect:   candidateinstances/flyweight.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.bridge.out
# Pattern we want to detect:   candidateinstances/flyweight.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.builder.out
# Pattern we want to detect:   candidateinstances/flyweight.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.chain.out
# Pattern we want to detect:   candidateinstances/flyweight.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.command.out
# Pattern we want to detect:   candidateinstances/flyweight.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.composite.out
# Pattern we want to detect:   candidateinstances/flyweight.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.decorator.out
# Pattern we want to detect:   candidateinstances/flyweight.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/flyweight.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.flyweight.out
# Pattern we want to detect:   candidateinstances/flyweight.flyweight.out

Number of positive candidate instances after the dynamic analysis: 2 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=flyweightFactory, 1=flyweight, 2=concreteFlyweight}

  0	 83%	 {0=ajp_code.flyweight.StateFactory, 1=ajp_code.flyweight.State, 2=ajp_code.flyweight.DirtyState}
  1	 83%	 {0=ajp_code.flyweight.StateFactory, 1=ajp_code.flyweight.State, 2=ajp_code.flyweight.CleanState}

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.interpreter.out
# Pattern we want to detect:   candidateinstances/flyweight.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.iterator.out
# Pattern we want to detect:   candidateinstances/flyweight.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.mediator.out
# Pattern we want to detect:   candidateinstances/flyweight.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.memento.out
# Pattern we want to detect:   candidateinstances/flyweight.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 39 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.observer.out
# Pattern we want to detect:   candidateinstances/flyweight.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 14 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.prototype.out
# Pattern we want to detect:   candidateinstances/flyweight.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.proxy.out
# Pattern we want to detect:   candidateinstances/flyweight.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.state.out
# Pattern we want to detect:   candidateinstances/flyweight.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.strategy.out
# Pattern we want to detect:   candidateinstances/flyweight.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.templatemethod.out
# Pattern we want to detect:   candidateinstances/flyweight.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/flyweight.visitor.out
# Pattern we want to detect:   candidateinstances/flyweight.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/interpreter.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.adapter.out
# Pattern we want to detect:   candidateinstances/interpreter.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.bridge.out
# Pattern we want to detect:   candidateinstances/interpreter.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.builder.out
# Pattern we want to detect:   candidateinstances/interpreter.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 58 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.chain.out
# Pattern we want to detect:   candidateinstances/interpreter.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.command.out
# Pattern we want to detect:   candidateinstances/interpreter.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 58 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.composite.out
# Pattern we want to detect:   candidateinstances/interpreter.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.decorator.out
# Pattern we want to detect:   candidateinstances/interpreter.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/interpreter.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.flyweight.out
# Pattern we want to detect:   candidateinstances/interpreter.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.interpreter.out
# Pattern we want to detect:   candidateinstances/interpreter.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.iterator.out
# Pattern we want to detect:   candidateinstances/interpreter.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 32 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.mediator.out
# Pattern we want to detect:   candidateinstances/interpreter.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.memento.out
# Pattern we want to detect:   candidateinstances/interpreter.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 130 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.observer.out
# Pattern we want to detect:   candidateinstances/interpreter.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 58 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.prototype.out
# Pattern we want to detect:   candidateinstances/interpreter.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 13 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.proxy.out
# Pattern we want to detect:   candidateinstances/interpreter.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.state.out
# Pattern we want to detect:   candidateinstances/interpreter.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 32 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.strategy.out
# Pattern we want to detect:   candidateinstances/interpreter.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 32 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.templatemethod.out
# Pattern we want to detect:   candidateinstances/interpreter.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/interpreter.visitor.out
# Pattern we want to detect:   candidateinstances/interpreter.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 12 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/iterator.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.adapter.out
# Pattern we want to detect:   candidateinstances/iterator.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.bridge.out
# Pattern we want to detect:   candidateinstances/iterator.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.builder.out
# Pattern we want to detect:   candidateinstances/iterator.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.chain.out
# Pattern we want to detect:   candidateinstances/iterator.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.command.out
# Pattern we want to detect:   candidateinstances/iterator.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.composite.out
# Pattern we want to detect:   candidateinstances/iterator.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.decorator.out
# Pattern we want to detect:   candidateinstances/iterator.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/iterator.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.flyweight.out
# Pattern we want to detect:   candidateinstances/iterator.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.interpreter.out
# Pattern we want to detect:   candidateinstances/iterator.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.iterator.out
# Pattern we want to detect:   candidateinstances/iterator.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.mediator.out
# Pattern we want to detect:   candidateinstances/iterator.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.memento.out
# Pattern we want to detect:   candidateinstances/iterator.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 42 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.observer.out
# Pattern we want to detect:   candidateinstances/iterator.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.prototype.out
# Pattern we want to detect:   candidateinstances/iterator.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.proxy.out
# Pattern we want to detect:   candidateinstances/iterator.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.state.out
# Pattern we want to detect:   candidateinstances/iterator.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.strategy.out
# Pattern we want to detect:   candidateinstances/iterator.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.templatemethod.out
# Pattern we want to detect:   candidateinstances/iterator.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/iterator.visitor.out
# Pattern we want to detect:   candidateinstances/iterator.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/mediator.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.adapter.out
# Pattern we want to detect:   candidateinstances/mediator.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.bridge.out
# Pattern we want to detect:   candidateinstances/mediator.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.builder.out
# Pattern we want to detect:   candidateinstances/mediator.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 20 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.chain.out
# Pattern we want to detect:   candidateinstances/mediator.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.command.out
# Pattern we want to detect:   candidateinstances/mediator.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 20 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.composite.out
# Pattern we want to detect:   candidateinstances/mediator.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.decorator.out
# Pattern we want to detect:   candidateinstances/mediator.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/mediator.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.flyweight.out
# Pattern we want to detect:   candidateinstances/mediator.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.interpreter.out
# Pattern we want to detect:   candidateinstances/mediator.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.iterator.out
# Pattern we want to detect:   candidateinstances/mediator.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.mediator.out
# Pattern we want to detect:   candidateinstances/mediator.mediator.out

Number of positive candidate instances after the dynamic analysis: 3 out of 3 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=concreteMediator, 1=mediator, 2=concreteColleague}

  0	 100%	 {0=ajp_code.mediator.ContactMediatorImpl, 1=ajp_code.mediator.ContactMediator, 2=ajp_code.mediator.ContactEditorPanel}
  1	 100%	 {0=ajp_code.mediator.ContactMediatorImpl, 1=ajp_code.mediator.ContactMediator, 2=ajp_code.mediator.ContactSelectorPanel}
  2	 80%	 {0=ajp_code.mediator.ContactMediatorImpl, 1=ajp_code.mediator.ContactMediator, 2=ajp_code.mediator.ContactDisplayPanel}

######################################################################################################## 

# Code example from:           candidateinstances/mediator.memento.out
# Pattern we want to detect:   candidateinstances/mediator.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 79 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.observer.out
# Pattern we want to detect:   candidateinstances/mediator.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 20 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.prototype.out
# Pattern we want to detect:   candidateinstances/mediator.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.proxy.out
# Pattern we want to detect:   candidateinstances/mediator.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.singleton.out
# Pattern we want to detect:   candidateinstances/mediator.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.state.out
# Pattern we want to detect:   candidateinstances/mediator.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.strategy.out
# Pattern we want to detect:   candidateinstances/mediator.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.templatemethod.out
# Pattern we want to detect:   candidateinstances/mediator.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/mediator.visitor.out
# Pattern we want to detect:   candidateinstances/mediator.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/memento.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.adapter.out
# Pattern we want to detect:   candidateinstances/memento.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.bridge.out
# Pattern we want to detect:   candidateinstances/memento.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.builder.out
# Pattern we want to detect:   candidateinstances/memento.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.chain.out
# Pattern we want to detect:   candidateinstances/memento.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.command.out
# Pattern we want to detect:   candidateinstances/memento.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.composite.out
# Pattern we want to detect:   candidateinstances/memento.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.decorator.out
# Pattern we want to detect:   candidateinstances/memento.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/memento.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.flyweight.out
# Pattern we want to detect:   candidateinstances/memento.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.interpreter.out
# Pattern we want to detect:   candidateinstances/memento.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.iterator.out
# Pattern we want to detect:   candidateinstances/memento.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.mediator.out
# Pattern we want to detect:   candidateinstances/memento.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.memento.out
# Pattern we want to detect:   candidateinstances/memento.memento.out

Number of positive candidate instances after the dynamic analysis: 5 out of 15 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=originator, 1=memento, 2=caretaker}

  0	 100%	 {0=ajp_code.memento.AddressBook$AddressBookMemento, 1=ajp_code.memento.AddressBook$AddressBookMemento, 2=ajp_code.memento.AddressBook}
  1	 100%	 {0=ajp_code.memento.AddressBook, 1=ajp_code.memento.AddressBook, 2=ajp_code.memento.AddressBook$AddressBookMemento}
  2	 100%	 {0=ajp_code.memento.AddressBook$AddressBookMemento, 1=ajp_code.memento.Contact, 2=ajp_code.memento.AddressBook}
  3	 80%	 {0=ajp_code.memento.AddressBook, 1=ajp_code.memento.AddressBook, 2=ajp_code.memento.RunPattern}
  4	 80%	 {0=ajp_code.memento.AddressBook, 1=ajp_code.memento.ContactImpl, 2=ajp_code.memento.RunPattern}

######################################################################################################## 

# Code example from:           candidateinstances/memento.observer.out
# Pattern we want to detect:   candidateinstances/memento.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.prototype.out
# Pattern we want to detect:   candidateinstances/memento.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.proxy.out
# Pattern we want to detect:   candidateinstances/memento.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.singleton.out
# Pattern we want to detect:   candidateinstances/memento.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.state.out
# Pattern we want to detect:   candidateinstances/memento.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.strategy.out
# Pattern we want to detect:   candidateinstances/memento.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.templatemethod.out
# Pattern we want to detect:   candidateinstances/memento.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/memento.visitor.out
# Pattern we want to detect:   candidateinstances/memento.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/observer.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.adapter.out
# Pattern we want to detect:   candidateinstances/observer.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.bridge.out
# Pattern we want to detect:   candidateinstances/observer.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.builder.out
# Pattern we want to detect:   candidateinstances/observer.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.chain.out
# Pattern we want to detect:   candidateinstances/observer.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.command.out
# Pattern we want to detect:   candidateinstances/observer.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.composite.out
# Pattern we want to detect:   candidateinstances/observer.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.decorator.out
# Pattern we want to detect:   candidateinstances/observer.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/observer.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.flyweight.out
# Pattern we want to detect:   candidateinstances/observer.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.interpreter.out
# Pattern we want to detect:   candidateinstances/observer.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.iterator.out
# Pattern we want to detect:   candidateinstances/observer.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.mediator.out
# Pattern we want to detect:   candidateinstances/observer.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.memento.out
# Pattern we want to detect:   candidateinstances/observer.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 51 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.observer.out
# Pattern we want to detect:   candidateinstances/observer.observer.out

Number of positive candidate instances after the dynamic analysis: 5 out of 5 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=subject, 1=concreteSubject, 2=observer, 3=concreteObserver}

  0	 89%	 {0=ajp_code.observer.TaskChangeObservable, 1=ajp_code.observer.TaskChangeObservable, 2=ajp_code.observer.TaskChangeObserver, 3=ajp_code.observer.TaskEditorPanel}
  1	 89%	 {0=ajp_code.observer.TaskChangeObservable, 1=ajp_code.observer.TaskChangeObservable, 2=ajp_code.observer.TaskChangeObserver, 3=ajp_code.observer.TaskSelectorPanel}
  2	 89%	 {0=ajp_code.observer.TaskChangeObservable, 1=ajp_code.observer.Task, 2=ajp_code.observer.TaskChangeObserver, 3=ajp_code.observer.TaskEditorPanel}
  3	 89%	 {0=ajp_code.observer.TaskChangeObservable, 1=ajp_code.observer.Task, 2=ajp_code.observer.TaskChangeObserver, 3=ajp_code.observer.TaskHistoryPanel}
  4	 89%	 {0=ajp_code.observer.TaskChangeObservable, 1=ajp_code.observer.Task, 2=ajp_code.observer.TaskChangeObserver, 3=ajp_code.observer.TaskSelectorPanel}

######################################################################################################## 

# Code example from:           candidateinstances/observer.prototype.out
# Pattern we want to detect:   candidateinstances/observer.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.proxy.out
# Pattern we want to detect:   candidateinstances/observer.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.singleton.out
# Pattern we want to detect:   candidateinstances/observer.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.state.out
# Pattern we want to detect:   candidateinstances/observer.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.strategy.out
# Pattern we want to detect:   candidateinstances/observer.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.templatemethod.out
# Pattern we want to detect:   candidateinstances/observer.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/observer.visitor.out
# Pattern we want to detect:   candidateinstances/observer.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/prototype.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.adapter.out
# Pattern we want to detect:   candidateinstances/prototype.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.bridge.out
# Pattern we want to detect:   candidateinstances/prototype.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.builder.out
# Pattern we want to detect:   candidateinstances/prototype.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.chain.out
# Pattern we want to detect:   candidateinstances/prototype.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.command.out
# Pattern we want to detect:   candidateinstances/prototype.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.composite.out
# Pattern we want to detect:   candidateinstances/prototype.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.decorator.out
# Pattern we want to detect:   candidateinstances/prototype.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/prototype.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.flyweight.out
# Pattern we want to detect:   candidateinstances/prototype.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.interpreter.out
# Pattern we want to detect:   candidateinstances/prototype.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.iterator.out
# Pattern we want to detect:   candidateinstances/prototype.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.mediator.out
# Pattern we want to detect:   candidateinstances/prototype.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.memento.out
# Pattern we want to detect:   candidateinstances/prototype.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.observer.out
# Pattern we want to detect:   candidateinstances/prototype.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.prototype.out
# Pattern we want to detect:   candidateinstances/prototype.prototype.out

Number of positive candidate instances after the dynamic analysis: 1 out of 1 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=prototypeInterface, 1=prototype, 2=client}

  0	 100%	 {0=ajp_code.prototype.Copyable, 1=ajp_code.prototype.Address, 2=ajp_code.prototype.RunPattern}

######################################################################################################## 

# Code example from:           candidateinstances/prototype.proxy.out
# Pattern we want to detect:   candidateinstances/prototype.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.state.out
# Pattern we want to detect:   candidateinstances/prototype.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.strategy.out
# Pattern we want to detect:   candidateinstances/prototype.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.templatemethod.out
# Pattern we want to detect:   candidateinstances/prototype.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/prototype.visitor.out
# Pattern we want to detect:   candidateinstances/prototype.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/proxy.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.adapter.out
# Pattern we want to detect:   candidateinstances/proxy.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.bridge.out
# Pattern we want to detect:   candidateinstances/proxy.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.builder.out
# Pattern we want to detect:   candidateinstances/proxy.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.chain.out
# Pattern we want to detect:   candidateinstances/proxy.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.command.out
# Pattern we want to detect:   candidateinstances/proxy.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.composite.out
# Pattern we want to detect:   candidateinstances/proxy.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.decorator.out
# Pattern we want to detect:   candidateinstances/proxy.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/proxy.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.flyweight.out
# Pattern we want to detect:   candidateinstances/proxy.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.interpreter.out
# Pattern we want to detect:   candidateinstances/proxy.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.iterator.out
# Pattern we want to detect:   candidateinstances/proxy.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.mediator.out
# Pattern we want to detect:   candidateinstances/proxy.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.memento.out
# Pattern we want to detect:   candidateinstances/proxy.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 35 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.observer.out
# Pattern we want to detect:   candidateinstances/proxy.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.prototype.out
# Pattern we want to detect:   candidateinstances/proxy.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.proxy.out
# Pattern we want to detect:   candidateinstances/proxy.proxy.out

Number of positive candidate instances after the dynamic analysis: 1 out of 1 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=realSubject, 1=subject, 2=proxy}

  0	 100%	 {0=ajp_code.proxy.AddressBookImpl, 1=ajp_code.proxy.AddressBook, 2=ajp_code.proxy.AddressBookProxy}

######################################################################################################## 

# Code example from:           candidateinstances/proxy.state.out
# Pattern we want to detect:   candidateinstances/proxy.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.strategy.out
# Pattern we want to detect:   candidateinstances/proxy.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.templatemethod.out
# Pattern we want to detect:   candidateinstances/proxy.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/proxy.visitor.out
# Pattern we want to detect:   candidateinstances/proxy.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/singleton.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.adapter.out
# Pattern we want to detect:   candidateinstances/singleton.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.bridge.out
# Pattern we want to detect:   candidateinstances/singleton.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.builder.out
# Pattern we want to detect:   candidateinstances/singleton.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.chain.out
# Pattern we want to detect:   candidateinstances/singleton.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.command.out
# Pattern we want to detect:   candidateinstances/singleton.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.composite.out
# Pattern we want to detect:   candidateinstances/singleton.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.decorator.out
# Pattern we want to detect:   candidateinstances/singleton.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/singleton.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.flyweight.out
# Pattern we want to detect:   candidateinstances/singleton.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.interpreter.out
# Pattern we want to detect:   candidateinstances/singleton.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.iterator.out
# Pattern we want to detect:   candidateinstances/singleton.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.mediator.out
# Pattern we want to detect:   candidateinstances/singleton.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.memento.out
# Pattern we want to detect:   candidateinstances/singleton.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.observer.out
# Pattern we want to detect:   candidateinstances/singleton.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.prototype.out
# Pattern we want to detect:   candidateinstances/singleton.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.proxy.out
# Pattern we want to detect:   candidateinstances/singleton.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.singleton.out
# Pattern we want to detect:   candidateinstances/singleton.singleton.out

Number of positive candidate instances after the dynamic analysis: 2 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=client, 1=singleton}

  0	 100%	 {0=ajp_code.singleton.SingletonGui, 1=ajp_code.singleton.SingletonGui$WindowCloseManager}
  1	 100%	 {0=ajp_code.singleton.SingletonGui, 1=ajp_code.singleton.HistoryList}

######################################################################################################## 

# Code example from:           candidateinstances/singleton.state.out
# Pattern we want to detect:   candidateinstances/singleton.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.strategy.out
# Pattern we want to detect:   candidateinstances/singleton.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.templatemethod.out
# Pattern we want to detect:   candidateinstances/singleton.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/singleton.visitor.out
# Pattern we want to detect:   candidateinstances/singleton.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/state.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.adapter.out
# Pattern we want to detect:   candidateinstances/state.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.bridge.out
# Pattern we want to detect:   candidateinstances/state.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.builder.out
# Pattern we want to detect:   candidateinstances/state.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.chain.out
# Pattern we want to detect:   candidateinstances/state.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.command.out
# Pattern we want to detect:   candidateinstances/state.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 18 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.composite.out
# Pattern we want to detect:   candidateinstances/state.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.decorator.out
# Pattern we want to detect:   candidateinstances/state.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/state.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.flyweight.out
# Pattern we want to detect:   candidateinstances/state.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.interpreter.out
# Pattern we want to detect:   candidateinstances/state.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.iterator.out
# Pattern we want to detect:   candidateinstances/state.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.mediator.out
# Pattern we want to detect:   candidateinstances/state.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.memento.out
# Pattern we want to detect:   candidateinstances/state.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 93 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.observer.out
# Pattern we want to detect:   candidateinstances/state.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 20 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.prototype.out
# Pattern we want to detect:   candidateinstances/state.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.proxy.out
# Pattern we want to detect:   candidateinstances/state.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 1 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.singleton.out
# Pattern we want to detect:   candidateinstances/state.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.state.out
# Pattern we want to detect:   candidateinstances/state.state.out

Number of positive candidate instances after the dynamic analysis: 2 out of 8 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=context, 1=state, 2=concreteState}

  0	 86%	 {0=ajp_code.state.CalendarEditor, 1=ajp_code.state.State, 2=ajp_code.state.CalendarEditor$CleanState}
  1	 86%	 {0=ajp_code.state.CalendarEditor, 1=ajp_code.state.State, 2=ajp_code.state.CalendarEditor$DirtyState}

######################################################################################################## 

# Code example from:           candidateinstances/state.strategy.out
# Pattern we want to detect:   candidateinstances/state.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.templatemethod.out
# Pattern we want to detect:   candidateinstances/state.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/state.visitor.out
# Pattern we want to detect:   candidateinstances/state.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/strategy.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.adapter.out
# Pattern we want to detect:   candidateinstances/strategy.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 8 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.bridge.out
# Pattern we want to detect:   candidateinstances/strategy.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.builder.out
# Pattern we want to detect:   candidateinstances/strategy.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.chain.out
# Pattern we want to detect:   candidateinstances/strategy.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.command.out
# Pattern we want to detect:   candidateinstances/strategy.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.composite.out
# Pattern we want to detect:   candidateinstances/strategy.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.decorator.out
# Pattern we want to detect:   candidateinstances/strategy.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/strategy.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.flyweight.out
# Pattern we want to detect:   candidateinstances/strategy.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.interpreter.out
# Pattern we want to detect:   candidateinstances/strategy.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.iterator.out
# Pattern we want to detect:   candidateinstances/strategy.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.mediator.out
# Pattern we want to detect:   candidateinstances/strategy.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.memento.out
# Pattern we want to detect:   candidateinstances/strategy.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 49 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.observer.out
# Pattern we want to detect:   candidateinstances/strategy.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.prototype.out
# Pattern we want to detect:   candidateinstances/strategy.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.proxy.out
# Pattern we want to detect:   candidateinstances/strategy.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.singleton.out
# Pattern we want to detect:   candidateinstances/strategy.singleton.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.state.out
# Pattern we want to detect:   candidateinstances/strategy.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.strategy.out
# Pattern we want to detect:   candidateinstances/strategy.strategy.out

Number of positive candidate instances after the dynamic analysis: 1 out of 7 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=context, 1=strategy, 2=concreteStrategy}

  0	 83%	 {0=ajp_code.strategy.ContactList, 1=ajp_code.strategy.SummarizingStrategy, 2=ajp_code.strategy.OrganizationSummarizer}

######################################################################################################## 

# Code example from:           candidateinstances/strategy.templatemethod.out
# Pattern we want to detect:   candidateinstances/strategy.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/strategy.visitor.out
# Pattern we want to detect:   candidateinstances/strategy.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/templatemethod.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.adapter.out
# Pattern we want to detect:   candidateinstances/templatemethod.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.bridge.out
# Pattern we want to detect:   candidateinstances/templatemethod.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.builder.out
# Pattern we want to detect:   candidateinstances/templatemethod.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.chain.out
# Pattern we want to detect:   candidateinstances/templatemethod.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.command.out
# Pattern we want to detect:   candidateinstances/templatemethod.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.composite.out
# Pattern we want to detect:   candidateinstances/templatemethod.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.decorator.out
# Pattern we want to detect:   candidateinstances/templatemethod.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/templatemethod.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.flyweight.out
# Pattern we want to detect:   candidateinstances/templatemethod.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.interpreter.out
# Pattern we want to detect:   candidateinstances/templatemethod.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.iterator.out
# Pattern we want to detect:   candidateinstances/templatemethod.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.mediator.out
# Pattern we want to detect:   candidateinstances/templatemethod.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.memento.out
# Pattern we want to detect:   candidateinstances/templatemethod.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 6 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.observer.out
# Pattern we want to detect:   candidateinstances/templatemethod.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.prototype.out
# Pattern we want to detect:   candidateinstances/templatemethod.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 2 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.proxy.out
# Pattern we want to detect:   candidateinstances/templatemethod.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.state.out
# Pattern we want to detect:   candidateinstances/templatemethod.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.strategy.out
# Pattern we want to detect:   candidateinstances/templatemethod.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.templatemethod.out
# Pattern we want to detect:   candidateinstances/templatemethod.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 1 out of 2 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=abstractClass, 1=concreteClass}

  0	 100%	 {0=ajp_code.templatemethod.ProjectItem, 1=ajp_code.templatemethod.Task}

######################################################################################################## 

# Code example from:           candidateinstances/templatemethod.visitor.out
# Pattern we want to detect:   candidateinstances/templatemethod.visitor.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.AbstractFactory.out
# Pattern we want to detect:   candidateinstances/visitor.AbstractFactory.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.adapter.out
# Pattern we want to detect:   candidateinstances/visitor.adapter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 26 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.bridge.out
# Pattern we want to detect:   candidateinstances/visitor.bridge.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.builder.out
# Pattern we want to detect:   candidateinstances/visitor.builder.out

Number of positive candidate instances after the dynamic analysis: 0 out of 45 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.chain.out
# Pattern we want to detect:   candidateinstances/visitor.chain.out

Number of positive candidate instances after the dynamic analysis: 0 out of 9 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.command.out
# Pattern we want to detect:   candidateinstances/visitor.command.out

Number of positive candidate instances after the dynamic analysis: 0 out of 45 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.composite.out
# Pattern we want to detect:   candidateinstances/visitor.composite.out

Number of positive candidate instances after the dynamic analysis: 0 out of 7 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.decorator.out
# Pattern we want to detect:   candidateinstances/visitor.decorator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.FactoryMethod.out
# Pattern we want to detect:   candidateinstances/visitor.FactoryMethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 4 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.flyweight.out
# Pattern we want to detect:   candidateinstances/visitor.flyweight.out

Number of positive candidate instances after the dynamic analysis: 0 out of 5 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.interpreter.out
# Pattern we want to detect:   candidateinstances/visitor.interpreter.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.iterator.out
# Pattern we want to detect:   candidateinstances/visitor.iterator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 21 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.mediator.out
# Pattern we want to detect:   candidateinstances/visitor.mediator.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.memento.out
# Pattern we want to detect:   candidateinstances/visitor.memento.out

Number of positive candidate instances after the dynamic analysis: 0 out of 107 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.observer.out
# Pattern we want to detect:   candidateinstances/visitor.observer.out

Number of positive candidate instances after the dynamic analysis: 0 out of 45 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.prototype.out
# Pattern we want to detect:   candidateinstances/visitor.prototype.out

Number of positive candidate instances after the dynamic analysis: 0 out of 11 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.proxy.out
# Pattern we want to detect:   candidateinstances/visitor.proxy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 0 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.state.out
# Pattern we want to detect:   candidateinstances/visitor.state.out

Number of positive candidate instances after the dynamic analysis: 0 out of 21 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.strategy.out
# Pattern we want to detect:   candidateinstances/visitor.strategy.out

Number of positive candidate instances after the dynamic analysis: 0 out of 21 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.templatemethod.out
# Pattern we want to detect:   candidateinstances/visitor.templatemethod.out

Number of positive candidate instances after the dynamic analysis: 0 out of 3 ( threshold = 80% )
None of the given candidate instances is a design pattern.

######################################################################################################## 

# Code example from:           candidateinstances/visitor.visitor.out
# Pattern we want to detect:   candidateinstances/visitor.visitor.out

Number of positive candidate instances after the dynamic analysis: 2 out of 5 ( threshold = 80% )
Here is a ranked list of all candidate instances with the corresponding class names {and pattern roles}: {0=visitor, 1=concreteVisitor, 2=element, 3=concreteElement}

  0	 100%	 {0=ajp_code.visitor.ProjectVisitor, 1=ajp_code.visitor.ProjectCostVisitor, 2=ajp_code.visitor.Task, 3=ajp_code.visitor.DependentTask}
  1	 100%	 {0=ajp_code.visitor.ProjectItem, 1=ajp_code.visitor.Project, 2=ajp_code.visitor.Task, 3=ajp_code.visitor.DependentTask}

######################################################################################################## 

